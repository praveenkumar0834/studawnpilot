{"version":3,"sources":["/home/test/Downloads/coreui-free-angular-admin-template-master/node_modules/@coreui/angular/fesm2015/coreui-angular.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oGAiDC;;;;;2BAK0B,AAExB;;;;;;;;;;;;;;;;;;;;;;;+HAmBF;;;;;;;;;;;;;;qCAcoC,AAKlC;;;;;;;;;;;;;;;;;;WAcF;;;;;;;;;;;uCAWsC,AAIpC;;;;;;;;;;;;;;;;;;;WAeF;;;;;;;;;;;2CAW0C,AAIxC;;;;;;;;;;;;;;;;;;;;;;;;WAoBF;;;;;;;;;;;6CAW4C,AAI1C;;;;;;;;;;;;;;;;;;;WAeF;;;;;;;;;;;qCAWoC,AAIlC;;;;;;;;;;;;;;;;;;;;;;iIAkBF;;;;;;;;;;;;;;mCAckC,AAKhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yKAqCF;;;;;;;;;sCASqC,AAInC;;;;;;;;;;;cAKF,CAAC,AA4Be;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA4ChB;;;;;;;;;;;;;;;;;;;;;gCAqB+B,AAK7B;;;;;;;;;;;yBAKF,CAAC,AAeiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yLA+BlB;;;;;;mCAMkC,AAIhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iKAwBF;;;;;;;;;;;qCAWoC,AAclC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iKAyBF;;;;;;;;;;qCAUoC,AAMlC;;;;;;;;;;;;;;;;;;+LAgBF,CAAC,AAOsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAoBvB;;;;;;;;;;;;;iCAagC,AAK9B;;;;;;;qKAKF,CAAC,AAOkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4FAiDnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAyDgC,AAK9B;;;;;;;;;;;;yBAKF,CAAC,AAgBkB;;;;;;;;;;;0GAUnB;;gCAE+B,AAI7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAiFF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAmCiC,AAK/B;;;;;;;;;;;;;;;;;;6BASF;;;;;wCAKuC,AAKrC;;;;;;;;;;;;;;;;6BAOF;;;;;sCAKqC,AAKnC;;;;;;;;;;;;;;;;6BAOF;;;;;wCAKuC,AAKrC;;;;;;;;;;;;;;;;;;;;;iJAaF;;;;;;;;;;;;;;;;;;2CAkB0C,AAKxC;;;;;;;;;;;;8HAUF;;;;mCAIkC,AAIhC;;;;;;;;;;;;;;;;;WAaF;;;;;;;;;;yCAUwC,AAItC;;;;;;;;;;;;;;;;;;;;;;;;;gGAcF;;;;;;;;;;;;;;;;qCAgBoC,AAKlC;;;;;;;;qTAMF;;;;;4CAK2C,AAKzC;;;;;;mHAIF,CAAC,AAGoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gHAqCrB,CAAC,AAGmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8KAMpB;;;;;;;;6CAQ4C,AAoB1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yHAqBF;;;;;;;;;;;;0CAYyC,AA+CvC;;;;;;;;;;;;;;;;;wDAUF;;;;;;;;gDAQ+C,AAY7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sJA0CF;;;;;;;;;;;;;yCAawC,AAMtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2SAsDF;;;;;;;;;0CASyC,AAKvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kLA4BF;;;;;;;;0CAQyC,AAKvC;;;;;;;;;;;;;;0HAYF,CAAC,AAKwB;;;;;;;;;;;;;;6HAYzB,CAAC,AAKyB;;;;;;;;;;;;;0HAW1B,CAAC,AAKwB;;;;;;;;;;;;;;;;;;;;;;yIAoBzB;;;;yCAIwC,AAItC;;;;;;;;;;;;;;yoDmB","file":"coreui-angular.js","sourcesContent":["import { __decorate, __param, __metadata } from 'tslib';\nimport { Inject, Renderer2, Injectable, Input, HostListener, Directive, ElementRef, NgModule, HostBinding, Component, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Output, Pipe } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { NavigationEnd, Router, ActivatedRoute, RouterModule } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nconst sidebarCssClasses = [\r\n    'sidebar-show',\r\n    'sidebar-sm-show',\r\n    'sidebar-md-show',\r\n    'sidebar-lg-show',\r\n    'sidebar-xl-show'\r\n];\r\nconst asideMenuCssClasses = [\r\n    'aside-menu-show',\r\n    'aside-menu-sm-show',\r\n    'aside-menu-md-show',\r\n    'aside-menu-lg-show',\r\n    'aside-menu-xl-show'\r\n];\n\nconst RemoveClasses = (NewClassNames) => {\r\n    const MatchClasses = NewClassNames.map((Class) => document.body.classList.contains(Class));\r\n    return MatchClasses.indexOf(true) !== -1;\r\n};\r\nconst ɵ0 = RemoveClasses;\r\nconst ToggleClasses = (Toggle, ClassNames) => {\r\n    const Level = ClassNames.indexOf(Toggle);\r\n    const NewClassNames = ClassNames.slice(0, Level + 1);\r\n    if (RemoveClasses(NewClassNames)) {\r\n        NewClassNames.map((Class) => document.body.classList.remove(Class));\r\n    }\r\n    else {\r\n        document.body.classList.add(Toggle);\r\n    }\r\n};\r\nlet ClassToggler = class ClassToggler {\r\n    constructor(document, renderer) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n    }\r\n    removeClasses(NewClassNames) {\r\n        const MatchClasses = NewClassNames.map((Class) => this.document.body.classList.contains(Class));\r\n        return MatchClasses.indexOf(true) !== -1;\r\n    }\r\n    toggleClasses(Toggle, ClassNames) {\r\n        const Level = ClassNames.indexOf(Toggle);\r\n        const NewClassNames = ClassNames.slice(0, Level + 1);\r\n        if (this.removeClasses(NewClassNames)) {\r\n            NewClassNames.map((Class) => this.renderer.removeClass(this.document.body, Class));\r\n        }\r\n        else {\r\n            this.renderer.addClass(this.document.body, Toggle);\r\n        }\r\n    }\r\n};\r\nClassToggler.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 }\r\n];\r\nClassToggler = __decorate([\r\n    Injectable(),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2])\r\n], ClassToggler);\n\n/**\r\n* Allows the sidebar to be toggled via click.\r\n*/\r\nlet SidebarToggleDirective = class SidebarToggleDirective {\r\n    constructor(classToggler) {\r\n        this.classToggler = classToggler;\r\n    }\r\n    ngOnInit() {\r\n        this.bp = this.breakpoint;\r\n    }\r\n    toggleOpen($event) {\r\n        $event.preventDefault();\r\n        const cssClass = this.bp ? `sidebar-${this.bp}-show` : sidebarCssClasses[0];\r\n        this.classToggler.toggleClasses(cssClass, sidebarCssClasses);\r\n    }\r\n};\r\nSidebarToggleDirective.ctorParameters = () => [\r\n    { type: ClassToggler }\r\n];\r\n__decorate([\r\n    Input('appSidebarToggler'),\r\n    __metadata(\"design:type\", String)\r\n], SidebarToggleDirective.prototype, \"breakpoint\", void 0);\r\n__decorate([\r\n    HostListener('click', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], SidebarToggleDirective.prototype, \"toggleOpen\", null);\r\nSidebarToggleDirective = __decorate([\r\n    Directive({\r\n        selector: '[appSidebarToggler]',\r\n        providers: [ClassToggler]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ClassToggler])\r\n], SidebarToggleDirective);\r\nlet SidebarMinimizeDirective = class SidebarMinimizeDirective {\r\n    constructor(document, renderer) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n    }\r\n    toggleOpen($event) {\r\n        $event.preventDefault();\r\n        const body = this.document.body;\r\n        body.classList.contains('sidebar-minimized') ?\r\n            this.renderer.removeClass(body, 'sidebar-minimized') :\r\n            this.renderer.addClass(body, 'sidebar-minimized');\r\n    }\r\n};\r\nSidebarMinimizeDirective.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    HostListener('click', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], SidebarMinimizeDirective.prototype, \"toggleOpen\", null);\r\nSidebarMinimizeDirective = __decorate([\r\n    Directive({\r\n        selector: '[appSidebarMinimizer]'\r\n    }),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2])\r\n], SidebarMinimizeDirective);\r\nlet MobileSidebarToggleDirective = class MobileSidebarToggleDirective {\r\n    constructor(document, renderer) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n    }\r\n    toggleOpen($event) {\r\n        $event.preventDefault();\r\n        const body = this.document.body;\r\n        body.classList.contains('sidebar-show') ?\r\n            this.renderer.removeClass(body, 'sidebar-show') :\r\n            this.renderer.addClass(body, 'sidebar-show');\r\n    }\r\n};\r\nMobileSidebarToggleDirective.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    HostListener('click', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], MobileSidebarToggleDirective.prototype, \"toggleOpen\", null);\r\nMobileSidebarToggleDirective = __decorate([\r\n    Directive({\r\n        selector: '[appMobileSidebarToggler]'\r\n    }),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2])\r\n], MobileSidebarToggleDirective);\r\n/**\r\n* Allows the off-canvas sidebar to be closed via click.\r\n*/\r\nlet SidebarOffCanvasCloseDirective = class SidebarOffCanvasCloseDirective {\r\n    constructor(document, renderer) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n    }\r\n    toggleOpen($event) {\r\n        $event.preventDefault();\r\n        const body = this.document.body;\r\n        if (body.classList.contains('sidebar-off-canvas')) {\r\n            body.classList.contains('sidebar-show') ?\r\n                this.renderer.removeClass(body, 'sidebar-show') :\r\n                this.renderer.addClass(body, 'sidebar-show');\r\n        }\r\n    }\r\n};\r\nSidebarOffCanvasCloseDirective.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    HostListener('click', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], SidebarOffCanvasCloseDirective.prototype, \"toggleOpen\", null);\r\nSidebarOffCanvasCloseDirective = __decorate([\r\n    Directive({\r\n        selector: '[appSidebarClose]'\r\n    }),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2])\r\n], SidebarOffCanvasCloseDirective);\r\nlet BrandMinimizeDirective = class BrandMinimizeDirective {\r\n    constructor(document, renderer) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n    }\r\n    toggleOpen($event) {\r\n        $event.preventDefault();\r\n        const body = this.document.body;\r\n        body.classList.contains('brand-minimized') ?\r\n            this.renderer.removeClass(body, 'brand-minimized') :\r\n            this.renderer.addClass(body, 'brand-minimized');\r\n    }\r\n};\r\nBrandMinimizeDirective.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    HostListener('click', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], BrandMinimizeDirective.prototype, \"toggleOpen\", null);\r\nBrandMinimizeDirective = __decorate([\r\n    Directive({\r\n        selector: '[appBrandMinimizer]'\r\n    }),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2])\r\n], BrandMinimizeDirective);\r\n/**\r\n* Allows the aside to be toggled via click.\r\n*/\r\nlet AsideToggleDirective = class AsideToggleDirective {\r\n    constructor(classToggler) {\r\n        this.classToggler = classToggler;\r\n    }\r\n    ngOnInit() {\r\n        this.bp = this.breakpoint;\r\n    }\r\n    toggleOpen($event) {\r\n        $event.preventDefault();\r\n        const cssClass = this.bp ? `aside-menu-${this.bp}-show` : asideMenuCssClasses[0];\r\n        this.classToggler.toggleClasses(cssClass, asideMenuCssClasses);\r\n    }\r\n};\r\nAsideToggleDirective.ctorParameters = () => [\r\n    { type: ClassToggler }\r\n];\r\n__decorate([\r\n    Input('appAsideMenuToggler'),\r\n    __metadata(\"design:type\", String)\r\n], AsideToggleDirective.prototype, \"breakpoint\", void 0);\r\n__decorate([\r\n    HostListener('click', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], AsideToggleDirective.prototype, \"toggleOpen\", null);\r\nAsideToggleDirective = __decorate([\r\n    Directive({\r\n        selector: '[appAsideMenuToggler]',\r\n        providers: [ClassToggler]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ClassToggler])\r\n], AsideToggleDirective);\r\nlet HtmlAttributesDirective = class HtmlAttributesDirective {\r\n    constructor(renderer, el) {\r\n        this.renderer = renderer;\r\n        this.el = el;\r\n    }\r\n    ngOnInit() {\r\n        const attribs = this.appHtmlAttr;\r\n        for (const attr in attribs) {\r\n            if (attr === 'style' && typeof (attribs[attr]) === 'object') {\r\n                this.setStyle(attribs[attr]);\r\n            }\r\n            else if (attr === 'class') {\r\n                this.addClass(attribs[attr]);\r\n            }\r\n            else {\r\n                this.setAttrib(attr, attribs[attr]);\r\n            }\r\n        }\r\n    }\r\n    setStyle(styles) {\r\n        for (const style in styles) {\r\n            this.renderer.setStyle(this.el.nativeElement, style, styles[style]);\r\n        }\r\n    }\r\n    addClass(classes) {\r\n        const classArray = (Array.isArray(classes) ? classes : classes.split(' '));\r\n        classArray.filter((element) => element.length > 0).forEach(element => {\r\n            this.renderer.addClass(this.el.nativeElement, element);\r\n        });\r\n    }\r\n    setAttrib(key, value) {\r\n        value !== null ?\r\n            this.renderer.setAttribute(this.el.nativeElement, key, value) :\r\n            this.renderer.removeAttribute(this.el.nativeElement, key);\r\n    }\r\n};\r\nHtmlAttributesDirective.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: ElementRef }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], HtmlAttributesDirective.prototype, \"appHtmlAttr\", void 0);\r\nHtmlAttributesDirective = __decorate([\r\n    Directive({\r\n        selector: '[appHtmlAttr]'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [Renderer2,\r\n        ElementRef])\r\n], HtmlAttributesDirective);\n\nlet LayoutModule = class LayoutModule {\r\n};\r\nLayoutModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            CommonModule\r\n        ],\r\n        exports: [\r\n            AsideToggleDirective,\r\n            BrandMinimizeDirective,\r\n            MobileSidebarToggleDirective,\r\n            SidebarToggleDirective,\r\n            SidebarMinimizeDirective,\r\n            SidebarOffCanvasCloseDirective,\r\n            HtmlAttributesDirective\r\n        ],\r\n        declarations: [\r\n            AsideToggleDirective,\r\n            BrandMinimizeDirective,\r\n            MobileSidebarToggleDirective,\r\n            SidebarToggleDirective,\r\n            SidebarMinimizeDirective,\r\n            SidebarOffCanvasCloseDirective,\r\n            HtmlAttributesDirective\r\n        ],\r\n        providers: [\r\n            ClassToggler\r\n        ]\r\n    })\r\n], LayoutModule);\n\nfunction Replace(el) {\r\n    const nativeElement = el.nativeElement;\r\n    const parentElement = nativeElement.parentElement;\r\n    // move all children out of the element\r\n    while (nativeElement.firstChild) {\r\n        parentElement.insertBefore(nativeElement.firstChild, nativeElement);\r\n    }\r\n    // remove the empty element(the host)\r\n    parentElement.removeChild(nativeElement);\r\n}\n\nlet AppAsideComponent = class AppAsideComponent {\r\n    constructor(document, renderer) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n        this.fixedClass = 'aside-menu-fixed';\r\n        this._aside = true;\r\n    }\r\n    ngOnInit() {\r\n        this.isFixed(this.fixed);\r\n        this.isOffCanvas(this.offCanvas);\r\n        this.displayBreakpoint(this.display);\r\n    }\r\n    ngOnDestroy() {\r\n        this.renderer.removeClass(this.document.body, this.fixedClass);\r\n    }\r\n    isFixed(fixed = this.fixed) {\r\n        if (fixed) {\r\n            this.renderer.addClass(this.document.body, this.fixedClass);\r\n        }\r\n    }\r\n    isOffCanvas(offCanvas = this.offCanvas) {\r\n        if (offCanvas) {\r\n            this.renderer.addClass(this.document.body, 'aside-menu-off-canvas');\r\n        }\r\n    }\r\n    displayBreakpoint(display = this.display) {\r\n        if (display !== false) {\r\n            const cssClass = this.display ? `aside-menu-${this.display}-show` : asideMenuCssClasses[0];\r\n            this.renderer.addClass(this.document.body, cssClass);\r\n        }\r\n    }\r\n};\r\nAppAsideComponent.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppAsideComponent.prototype, \"display\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AppAsideComponent.prototype, \"fixed\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AppAsideComponent.prototype, \"offCanvas\", void 0);\r\n__decorate([\r\n    HostBinding('class.aside-menu'),\r\n    __metadata(\"design:type\", Object)\r\n], AppAsideComponent.prototype, \"_aside\", void 0);\r\nAppAsideComponent = __decorate([\r\n    Component({\r\n        selector: 'app-aside, cui-aside',\r\n        template: `<ng-content></ng-content>`\r\n    }),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2])\r\n], AppAsideComponent);\n\nlet AppAsideModule = class AppAsideModule {\r\n};\r\nAppAsideModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            CommonModule,\r\n            LayoutModule\r\n        ],\r\n        exports: [\r\n            AppAsideComponent,\r\n            LayoutModule\r\n        ],\r\n        declarations: [\r\n            AppAsideComponent\r\n        ]\r\n    })\r\n], AppAsideModule);\n\nlet AppBreadcrumbService = class AppBreadcrumbService {\r\n    constructor(router, route) {\r\n        this.router = router;\r\n        this.route = route;\r\n        this._breadcrumbs = new BehaviorSubject(new Array());\r\n        this.breadcrumbs = this._breadcrumbs.asObservable();\r\n        this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe((event) => {\r\n            const breadcrumbs = [];\r\n            let currentRoute = this.route.root, url = '';\r\n            do {\r\n                const childrenRoutes = currentRoute.children;\r\n                currentRoute = null;\r\n                // tslint:disable-next-line:no-shadowed-variable\r\n                childrenRoutes.forEach(route => {\r\n                    if (route.outlet === 'primary') {\r\n                        const routeSnapshot = route.snapshot;\r\n                        url += '/' + routeSnapshot.url.map(segment => segment.path).join('/');\r\n                        breadcrumbs.push({\r\n                            label: route.snapshot.data,\r\n                            url: url\r\n                        });\r\n                        currentRoute = route;\r\n                    }\r\n                });\r\n            } while (currentRoute);\r\n            this._breadcrumbs.next(Object.assign([], breadcrumbs));\r\n            return breadcrumbs;\r\n        });\r\n    }\r\n};\r\nAppBreadcrumbService.ctorParameters = () => [\r\n    { type: Router },\r\n    { type: ActivatedRoute }\r\n];\r\nAppBreadcrumbService.ɵprov = ɵɵdefineInjectable({ factory: function AppBreadcrumbService_Factory() { return new AppBreadcrumbService(ɵɵinject(Router), ɵɵinject(ActivatedRoute)); }, token: AppBreadcrumbService, providedIn: \"root\" });\r\nAppBreadcrumbService = __decorate([\r\n    Injectable({\r\n        providedIn: 'root'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [Router, ActivatedRoute])\r\n], AppBreadcrumbService);\n\nlet AppBreadcrumbComponent = class AppBreadcrumbComponent {\r\n    constructor(document, renderer, service, el) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n        this.service = service;\r\n        this.el = el;\r\n        this.fixedClass = 'breadcrumb-fixed';\r\n    }\r\n    ngOnInit() {\r\n        Replace(this.el);\r\n        this.isFixed(this.fixed);\r\n        this.breadcrumbs = this.service.breadcrumbs;\r\n    }\r\n    ngOnDestroy() {\r\n        this.renderer.removeClass(this.document.body, this.fixedClass);\r\n    }\r\n    isFixed(fixed = this.fixed) {\r\n        if (fixed) {\r\n            this.renderer.addClass(this.document.body, this.fixedClass);\r\n        }\r\n    }\r\n};\r\nAppBreadcrumbComponent.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 },\r\n    { type: AppBreadcrumbService },\r\n    { type: ElementRef }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AppBreadcrumbComponent.prototype, \"fixed\", void 0);\r\nAppBreadcrumbComponent = __decorate([\r\n    Component({\r\n        selector: 'app-breadcrumb',\r\n        template: `\n    <ng-template ngFor let-breadcrumb [ngForOf]=\"breadcrumbs | async\" let-last = last>\n      <li class=\"breadcrumb-item\"\n          *ngIf=\"breadcrumb.label.title && (breadcrumb.url.slice(-1) == '/' || last)\"\n          [ngClass]=\"{active: last}\">\n        <a *ngIf=\"!last\" [routerLink]=\"breadcrumb.url\">{{breadcrumb.label.title}}</a>\n        <span *ngIf=\"last\" [routerLink]=\"breadcrumb.url\">{{breadcrumb.label.title}}</span>\n      </li>\n    </ng-template>\n  `\r\n    }),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2,\r\n        AppBreadcrumbService,\r\n        ElementRef])\r\n], AppBreadcrumbComponent);\n\nlet CuiBreadcrumbComponent = class CuiBreadcrumbComponent {\r\n    constructor(document, renderer, service) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n        this.service = service;\r\n        this.fixedClass = 'breadcrumb-fixed';\r\n    }\r\n    ngOnInit() {\r\n        this.isFixed(this.fixed);\r\n        this.breadcrumbs = this.service.breadcrumbs;\r\n    }\r\n    ngOnDestroy() {\r\n        this.renderer.removeClass(this.document.body, this.fixedClass);\r\n    }\r\n    isFixed(fixed = this.fixed) {\r\n        if (fixed) {\r\n            this.renderer.addClass(this.document.body, this.fixedClass);\r\n        }\r\n    }\r\n};\r\nCuiBreadcrumbComponent.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 },\r\n    { type: AppBreadcrumbService }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], CuiBreadcrumbComponent.prototype, \"fixed\", void 0);\r\nCuiBreadcrumbComponent = __decorate([\r\n    Component({\r\n        // tslint:disable-next-line:component-selector\r\n        selector: 'cui-breadcrumb',\r\n        template: \"<ol class=\\\"breadcrumb\\\">\\r\\n  <ng-template ngFor let-breadcrumb [ngForOf]=\\\"breadcrumbs | async\\\" let-last = last>\\r\\n    <li class=\\\"breadcrumb-item\\\"\\r\\n        *ngIf=\\\"breadcrumb.label.title && (breadcrumb.url.slice(-1) == '/' || last)\\\"\\r\\n        [ngClass]=\\\"{active: last}\\\">\\r\\n      <a *ngIf=\\\"!last\\\" [routerLink]=\\\"breadcrumb.url\\\">{{breadcrumb.label.title}}</a>\\r\\n      <span *ngIf=\\\"last\\\" [routerLink]=\\\"breadcrumb.url\\\">{{breadcrumb.label.title}}</span>\\r\\n    </li>\\r\\n  </ng-template>\\r\\n  <ng-content></ng-content>\\r\\n</ol>\\r\\n\"\r\n    }),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2,\r\n        AppBreadcrumbService])\r\n], CuiBreadcrumbComponent);\n\nvar AppBreadcrumbModule_1;\r\n// @dynamic\r\nlet AppBreadcrumbModule = AppBreadcrumbModule_1 = class AppBreadcrumbModule {\r\n    static forRoot(config) {\r\n        return {\r\n            ngModule: AppBreadcrumbModule_1,\r\n            providers: [\r\n                AppBreadcrumbService\r\n            ]\r\n        };\r\n    }\r\n};\r\nAppBreadcrumbModule = AppBreadcrumbModule_1 = __decorate([\r\n    NgModule({\r\n        imports: [CommonModule, RouterModule],\r\n        exports: [AppBreadcrumbComponent, CuiBreadcrumbComponent],\r\n        declarations: [AppBreadcrumbComponent, CuiBreadcrumbComponent]\r\n    })\r\n], AppBreadcrumbModule);\n\nlet AppFooterComponent = class AppFooterComponent {\r\n    constructor(document, renderer) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n        this.fixedClass = 'footer-fixed';\r\n        this._footer = true;\r\n    }\r\n    ngOnInit() {\r\n        this.isFixed(this.fixed);\r\n    }\r\n    ngOnDestroy() {\r\n        this.renderer.removeClass(this.document.body, this.fixedClass);\r\n    }\r\n    isFixed(fixed = this.fixed) {\r\n        if (fixed) {\r\n            this.renderer.addClass(this.document.body, this.fixedClass);\r\n        }\r\n    }\r\n};\r\nAppFooterComponent.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AppFooterComponent.prototype, \"fixed\", void 0);\r\n__decorate([\r\n    HostBinding('class.app-footer'),\r\n    __metadata(\"design:type\", Object)\r\n], AppFooterComponent.prototype, \"_footer\", void 0);\r\nAppFooterComponent = __decorate([\r\n    Component({\r\n        selector: 'app-footer, cui-footer',\r\n        template: `<ng-content></ng-content>`\r\n    }),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2])\r\n], AppFooterComponent);\n\nlet AppFooterModule = class AppFooterModule {\r\n};\r\nAppFooterModule = __decorate([\r\n    NgModule({\r\n        imports: [CommonModule],\r\n        exports: [AppFooterComponent],\r\n        declarations: [AppFooterComponent]\r\n    })\r\n], AppFooterModule);\n\nlet AppHeaderComponent = class AppHeaderComponent {\r\n    constructor(document, renderer) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n        this.navbarBrandText = { icon: '🅲', text: '🅲 CoreUI' };\r\n        this.navbarBrandRouterLink = '';\r\n        this.fixedClass = 'header-fixed';\r\n        this._header = true;\r\n        this._navbar = true;\r\n        this.breakpoints = ['xl', 'lg', 'md', 'sm', 'xs'];\r\n        this.sidebarTogglerClass = 'd-none d-md-block';\r\n        this.sidebarTogglerMobileClass = 'd-lg-none';\r\n        this.asideTogglerClass = 'd-none d-md-block';\r\n        this.asideTogglerMobileClass = 'd-lg-none';\r\n    }\r\n    ngOnInit() {\r\n        this.isFixed(this.fixed);\r\n        this.navbarBrandImg = Boolean(this.navbarBrand || this.navbarBrandFull || this.navbarBrandMinimized);\r\n        this.navbarBrandRouterLink = this.navbarBrandRouterLink[0] ? this.navbarBrandRouterLink : this.navbarBrandHref;\r\n        this.sidebarTogglerClass = this.setToggerBreakpointClass(this.sidebarToggler);\r\n        this.sidebarTogglerMobileClass = this.setToggerMobileBreakpointClass(this.sidebarToggler);\r\n        this.asideTogglerClass = this.setToggerBreakpointClass(this.asideMenuToggler);\r\n        this.asideTogglerMobileClass = this.setToggerMobileBreakpointClass(this.asideMenuToggler);\r\n    }\r\n    ngOnDestroy() {\r\n        this.renderer.removeClass(this.document.body, this.fixedClass);\r\n    }\r\n    isFixed(fixed = this.fixed) {\r\n        if (fixed) {\r\n            this.renderer.addClass(this.document.body, this.fixedClass);\r\n        }\r\n    }\r\n    setToggerBreakpointClass(breakpoint = 'md') {\r\n        let togglerClass = 'd-none d-md-block';\r\n        if (this.breakpoints.includes(breakpoint)) {\r\n            const breakpointIndex = this.breakpoints.indexOf(breakpoint);\r\n            togglerClass = `d-none d-${breakpoint}-block`;\r\n        }\r\n        return togglerClass;\r\n    }\r\n    setToggerMobileBreakpointClass(breakpoint = 'lg') {\r\n        let togglerClass = 'd-lg-none';\r\n        if (this.breakpoints.includes(breakpoint)) {\r\n            togglerClass = `d-${breakpoint}-none`;\r\n        }\r\n        return togglerClass;\r\n    }\r\n};\r\nAppHeaderComponent.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AppHeaderComponent.prototype, \"fixed\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppHeaderComponent.prototype, \"navbarBrand\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppHeaderComponent.prototype, \"navbarBrandFull\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppHeaderComponent.prototype, \"navbarBrandMinimized\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppHeaderComponent.prototype, \"navbarBrandText\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AppHeaderComponent.prototype, \"navbarBrandHref\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppHeaderComponent.prototype, \"navbarBrandRouterLink\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppHeaderComponent.prototype, \"sidebarToggler\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AppHeaderComponent.prototype, \"mobileSidebarToggler\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppHeaderComponent.prototype, \"asideMenuToggler\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AppHeaderComponent.prototype, \"mobileAsideMenuToggler\", void 0);\r\n__decorate([\r\n    HostBinding('class.app-header'),\r\n    __metadata(\"design:type\", Object)\r\n], AppHeaderComponent.prototype, \"_header\", void 0);\r\n__decorate([\r\n    HostBinding('class.navbar'),\r\n    __metadata(\"design:type\", Object)\r\n], AppHeaderComponent.prototype, \"_navbar\", void 0);\r\nAppHeaderComponent = __decorate([\r\n    Component({\r\n        selector: 'app-header, cui-header',\r\n        template: \"<ng-template [ngIf]=\\\"mobileSidebarToggler != false\\\">\\r\\n  <button class=\\\"navbar-toggler {{sidebarTogglerMobileClass}}\\\" type=\\\"button\\\" appSidebarToggler>\\r\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n  </button>\\r\\n</ng-template>\\r\\n<a class=\\\"navbar-brand\\\" [routerLink]=\\\"navbarBrandRouterLink\\\">\\r\\n  <ng-template [ngIf]=\\\"navbarBrandImg\\\">\\r\\n    <img *ngIf=\\\"navbarBrand\\\"\\r\\n         [appHtmlAttr]=\\\"navbarBrand\\\"\\r\\n         [ngClass]=\\\"'navbar-brand'\\\">\\r\\n    <img *ngIf=\\\"navbarBrandFull\\\"\\r\\n         [appHtmlAttr]=\\\"navbarBrandFull\\\"\\r\\n         [ngClass]=\\\"'navbar-brand-full'\\\">\\r\\n    <img *ngIf=\\\"navbarBrandMinimized\\\"\\r\\n         [appHtmlAttr]=\\\"navbarBrandMinimized\\\"\\r\\n         [ngClass]=\\\"'navbar-brand-minimized'\\\">\\r\\n  </ng-template>\\r\\n  <ng-template [ngIf]=\\\"!navbarBrandImg\\\">\\r\\n    <div class=\\\"navbar-brand-full\\\" [innerHTML]=\\\"navbarBrandText.text\\\"></div>\\r\\n    <div class=\\\"navbar-brand-minimized\\\" [innerHTML]=\\\"navbarBrandText.icon\\\"></div>\\r\\n  </ng-template>\\r\\n</a>\\r\\n<ng-template [ngIf]=\\\"sidebarToggler != false\\\">\\r\\n  <button class=\\\"navbar-toggler {{sidebarTogglerClass}}\\\" type=\\\"button\\\" [appSidebarToggler]=\\\"sidebarToggler\\\">\\r\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n  </button>\\r\\n</ng-template>\\r\\n<ng-content></ng-content>\\r\\n<ng-template [ngIf]=\\\"asideMenuToggler != false\\\">\\r\\n  <button class=\\\"navbar-toggler {{asideTogglerClass}}\\\" type=\\\"button\\\" [appAsideMenuToggler]=\\\"asideMenuToggler\\\">\\r\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n  </button>\\r\\n</ng-template>\\r\\n<ng-template [ngIf]=\\\"mobileAsideMenuToggler != false\\\">\\r\\n  <button class=\\\"navbar-toggler {{asideTogglerMobileClass}}\\\" type=\\\"button\\\" appAsideMenuToggler>\\r\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n  </button>\\r\\n</ng-template>\\r\\n\"\r\n    }),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2])\r\n], AppHeaderComponent);\n\nlet AppHeaderModule = class AppHeaderModule {\r\n};\r\nAppHeaderModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            CommonModule,\r\n            RouterModule,\r\n            LayoutModule\r\n        ],\r\n        exports: [\r\n            AppHeaderComponent,\r\n            LayoutModule\r\n        ],\r\n        declarations: [\r\n            AppHeaderComponent\r\n        ]\r\n    })\r\n], AppHeaderModule);\n\nlet AppSidebarService = class AppSidebarService {\r\n    constructor() {\r\n        this.events = new BehaviorSubject({});\r\n        this.events$ = this.events.asObservable();\r\n    }\r\n    toggle(action) {\r\n        this.events.next(action);\r\n    }\r\n};\r\nAppSidebarService.ɵprov = ɵɵdefineInjectable({ factory: function AppSidebarService_Factory() { return new AppSidebarService(); }, token: AppSidebarService, providedIn: \"root\" });\r\nAppSidebarService = __decorate([\r\n    Injectable({\r\n        providedIn: 'root'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], AppSidebarService);\n\nlet AppSidebarComponent = class AppSidebarComponent {\r\n    constructor(document, renderer, sidebarService) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n        this.sidebarService = sidebarService;\r\n        this._minimized = false;\r\n        /**\r\n         * Emits whenever the minimized state of the sidebar changes.\r\n         * Primarily used to facilitate two-way binding.\r\n         */\r\n        this.minimizedChange = new EventEmitter();\r\n        this._sidebar = true;\r\n    }\r\n    get minimized() {\r\n        return this._minimized;\r\n    }\r\n    set minimized(value) {\r\n        // only update / emit events when the value changes\r\n        if (this._minimized !== value) {\r\n            this._minimized = value;\r\n            this._updateMinimized(value);\r\n            this.minimizedChange.emit(value);\r\n            this.sidebarService.toggle({ minimize: value });\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.displayBreakpoint(this.display);\r\n        this.isCompact(this.compact);\r\n        this.isFixed(this.fixed);\r\n        this.isOffCanvas(this.offCanvas);\r\n        this.sidebarService.toggle({ minimize: this.minimized });\r\n        this.subscriptionEvents = this.sidebarService.events$.subscribe(action => {\r\n            if (action.minimize !== undefined) {\r\n                action.minimize === 'toggle' ? this.toggleMinimized() : this.minimized = !!action.minimize;\r\n            }\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this.subscriptionEvents.unsubscribe();\r\n        this.minimizedChange.complete();\r\n        this.renderer.removeClass(this.document.body, 'sidebar-fixed');\r\n        this._updateMinimized(false);\r\n    }\r\n    isCompact(compact = this.compact) {\r\n        if (compact) {\r\n            this.renderer.addClass(this.document.body, 'sidebar-compact');\r\n        }\r\n    }\r\n    isFixed(fixed = this.fixed) {\r\n        if (fixed) {\r\n            this.renderer.addClass(this.document.body, 'sidebar-fixed');\r\n        }\r\n    }\r\n    toggleMinimized() {\r\n        this.minimized = !this._minimized;\r\n    }\r\n    isOffCanvas(offCanvas = this.offCanvas) {\r\n        if (offCanvas) {\r\n            this.renderer.addClass(this.document.body, 'sidebar-off-canvas');\r\n        }\r\n    }\r\n    displayBreakpoint(display = this.display) {\r\n        if (display !== false) {\r\n            const cssClass = display ? `sidebar-${display}-show` : sidebarCssClasses[0];\r\n            this.renderer.addClass(this.document.body, cssClass);\r\n        }\r\n    }\r\n    _updateMinimized(minimized) {\r\n        const body = this.document.body;\r\n        if (minimized) {\r\n            this.renderer.addClass(body, 'sidebar-minimized');\r\n            this.renderer.addClass(body, 'brand-minimized');\r\n        }\r\n        else {\r\n            this.renderer.removeClass(body, 'sidebar-minimized');\r\n            this.renderer.removeClass(body, 'brand-minimized');\r\n        }\r\n    }\r\n};\r\nAppSidebarComponent.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 },\r\n    { type: AppSidebarService }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AppSidebarComponent.prototype, \"compact\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarComponent.prototype, \"display\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AppSidebarComponent.prototype, \"fixed\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AppSidebarComponent.prototype, \"offCanvas\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [Boolean])\r\n], AppSidebarComponent.prototype, \"minimized\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarComponent.prototype, \"minimizedChange\", void 0);\r\n__decorate([\r\n    HostBinding('class.sidebar'),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarComponent.prototype, \"_sidebar\", void 0);\r\nAppSidebarComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar, cui-sidebar',\r\n        template: `<ng-content></ng-content>`\r\n    }),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2,\r\n        AppSidebarService])\r\n], AppSidebarComponent);\n\nlet AppSidebarFooterComponent = class AppSidebarFooterComponent {\r\n    constructor() {\r\n        this._sidebarFooter = true;\r\n    }\r\n};\r\n__decorate([\r\n    HostBinding('class.sidebar-footer'),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarFooterComponent.prototype, \"_sidebarFooter\", void 0);\r\nAppSidebarFooterComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-footer, cui-sidebar-footer',\r\n        template: `<ng-content></ng-content>`\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], AppSidebarFooterComponent);\n\nlet AppSidebarFormComponent = class AppSidebarFormComponent {\r\n    constructor() {\r\n        this._sidebarForm = true;\r\n    }\r\n};\r\n__decorate([\r\n    HostBinding('class.sidebar-form'),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarFormComponent.prototype, \"_sidebarForm\", void 0);\r\nAppSidebarFormComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-form, cui-sidebar-form',\r\n        template: `<ng-content></ng-content>`\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], AppSidebarFormComponent);\n\nlet AppSidebarHeaderComponent = class AppSidebarHeaderComponent {\r\n    constructor() {\r\n        this._sidebarHeader = true;\r\n    }\r\n};\r\n__decorate([\r\n    HostBinding('class.sidebar-header'),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarHeaderComponent.prototype, \"_sidebarHeader\", void 0);\r\nAppSidebarHeaderComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-header, cui-sidebar-header',\r\n        template: `<ng-content></ng-content>`\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], AppSidebarHeaderComponent);\n\nlet AppSidebarMinimizerComponent = class AppSidebarMinimizerComponent {\r\n    constructor(sidebarService) {\r\n        this.sidebarService = sidebarService;\r\n        this.role = 'button';\r\n        this._minimizer = true;\r\n    }\r\n    toggleOpen($event) {\r\n        $event.preventDefault();\r\n        this.sidebarService.toggle({ minimize: 'toggle' });\r\n    }\r\n};\r\nAppSidebarMinimizerComponent.ctorParameters = () => [\r\n    { type: AppSidebarService }\r\n];\r\n__decorate([\r\n    HostBinding('attr.role'), Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarMinimizerComponent.prototype, \"role\", void 0);\r\n__decorate([\r\n    HostBinding('class.sidebar-minimizer'),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarMinimizerComponent.prototype, \"_minimizer\", void 0);\r\n__decorate([\r\n    HostListener('click', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], AppSidebarMinimizerComponent.prototype, \"toggleOpen\", null);\r\nAppSidebarMinimizerComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-minimizer, cui-sidebar-minimizer',\r\n        template: ``\r\n    }),\r\n    __metadata(\"design:paramtypes\", [AppSidebarService])\r\n], AppSidebarMinimizerComponent);\n\nlet NavDropdownDirective = class NavDropdownDirective {\r\n    constructor(el) {\r\n        this.el = el;\r\n    }\r\n    toggle() {\r\n        this.el.nativeElement.classList.toggle('open');\r\n    }\r\n};\r\nNavDropdownDirective.ctorParameters = () => [\r\n    { type: ElementRef }\r\n];\r\nNavDropdownDirective = __decorate([\r\n    Directive({\r\n        selector: '[appNavDropdown]'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ElementRef])\r\n], NavDropdownDirective);\r\n/**\r\n * Allows the dropdown to be toggled via click.\r\n */\r\nlet NavDropdownToggleDirective = class NavDropdownToggleDirective {\r\n    constructor(dropdown) {\r\n        this.dropdown = dropdown;\r\n    }\r\n    toggleOpen($event) {\r\n        $event.preventDefault();\r\n        this.dropdown.toggle();\r\n    }\r\n};\r\nNavDropdownToggleDirective.ctorParameters = () => [\r\n    { type: NavDropdownDirective }\r\n];\r\n__decorate([\r\n    HostListener('click', ['$event']),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], NavDropdownToggleDirective.prototype, \"toggleOpen\", null);\r\nNavDropdownToggleDirective = __decorate([\r\n    Directive({\r\n        selector: '[appNavDropdownToggle]'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [NavDropdownDirective])\r\n], NavDropdownToggleDirective);\n\nlet AppSidebarNavComponent = class AppSidebarNavComponent {\r\n    constructor(router) {\r\n        this.router = router;\r\n        this.navItems = [];\r\n        this._sidebarBav = true;\r\n        this.role = 'nav';\r\n        this.navItemsArray = [];\r\n    }\r\n    ngOnChanges(changes) {\r\n        this.navItemsArray = Array.isArray(this.navItems) ? this.navItems.slice() : [];\r\n    }\r\n};\r\nAppSidebarNavComponent.ctorParameters = () => [\r\n    { type: Router }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array)\r\n], AppSidebarNavComponent.prototype, \"navItems\", void 0);\r\n__decorate([\r\n    HostBinding('class.sidebar-nav'),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarNavComponent.prototype, \"_sidebarBav\", void 0);\r\n__decorate([\r\n    HostBinding('attr.role'), Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarNavComponent.prototype, \"role\", void 0);\r\nAppSidebarNavComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-nav, cui-sidebar-nav',\r\n        template: \"<app-sidebar-nav-items\\n  class=\\\"nav\\\"\\n  [items]=\\\"navItemsArray\\\">\\n</app-sidebar-nav-items>\\n\"\r\n    }),\r\n    __metadata(\"design:paramtypes\", [Router])\r\n], AppSidebarNavComponent);\n\nlet AppSidebarNavDividerComponent = class AppSidebarNavDividerComponent {\r\n    constructor() { }\r\n    ngOnInit() { }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarNavDividerComponent.prototype, \"item\", void 0);\r\nAppSidebarNavDividerComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-nav-divider, cui-sidebar-nav-divider',\r\n        template: ``\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], AppSidebarNavDividerComponent);\n\nlet SidebarNavService = class SidebarNavService {\r\n};\r\nSidebarNavService = __decorate([\r\n    Injectable()\r\n], SidebarNavService);\r\nlet SidebarNavHelper = class SidebarNavHelper {\r\n    constructor() {\r\n        this.hasBadge = (item) => Boolean(item.badge);\r\n        this.hasIcon = (item) => Boolean(item.icon);\r\n    }\r\n    itemType(item) {\r\n        if (item.divider) {\r\n            return 'divider';\r\n        }\r\n        else if (item.title) {\r\n            return 'title';\r\n        }\r\n        else if (item.children) {\r\n            return 'dropdown';\r\n        }\r\n        else if (item.label) {\r\n            return 'label';\r\n        }\r\n        else if (!Object.keys(item).length) {\r\n            return 'empty';\r\n        }\r\n        else {\r\n            return 'link';\r\n        }\r\n    }\r\n    isActive(router, item) {\r\n        return router.isActive(item.url, false);\r\n    }\r\n    getIconClass(item) {\r\n        const classes = {\r\n            'nav-icon': true\r\n        };\r\n        const icon = item.icon;\r\n        classes[icon] = this.hasIcon(item);\r\n        return classes;\r\n    }\r\n};\r\nSidebarNavHelper = __decorate([\r\n    Injectable()\r\n], SidebarNavHelper);\n\nlet AppSidebarNavDropdownComponent = class AppSidebarNavDropdownComponent {\r\n    constructor(helper) {\r\n        this.helper = helper;\r\n    }\r\n};\r\nAppSidebarNavDropdownComponent.ctorParameters = () => [\r\n    { type: SidebarNavHelper }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarNavDropdownComponent.prototype, \"item\", void 0);\r\nAppSidebarNavDropdownComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-nav-dropdown, cui-sidebar-nav-dropdown',\r\n        template: `\r\n    <a class=\"nav-link nav-dropdown-toggle\"\r\n       appNavDropdownToggle\r\n       [appHtmlAttr]=\"item.attributes\">\r\n      <i *ngIf=\"helper.hasIcon(item)\" [ngClass]=\"item | appSidebarNavIcon\"></i>\r\n      <ng-container>{{item.name}}</ng-container>\r\n      <span *ngIf=\"helper.hasBadge(item)\" [ngClass]=\"item | appSidebarNavBadge\">{{ item.badge.text }}</span>\r\n    </a>\r\n    <app-sidebar-nav-items\r\n      class=\"nav-dropdown-items\"\r\n      [items]=\"item.children\">\r\n    </app-sidebar-nav-items>\r\n  `,\r\n        providers: [SidebarNavHelper],\r\n        styles: ['.nav-dropdown-toggle { cursor: pointer; }',\r\n            '.nav-dropdown-items { display: block; }']\r\n    }),\r\n    __metadata(\"design:paramtypes\", [SidebarNavHelper])\r\n], AppSidebarNavDropdownComponent);\n\nlet AppSidebarNavItemsComponent = class AppSidebarNavItemsComponent {\r\n    constructor(document, renderer, router, helper) {\r\n        this.document = document;\r\n        this.renderer = renderer;\r\n        this.router = router;\r\n        this.helper = helper;\r\n    }\r\n    set items(items) {\r\n        this._items = [...items];\r\n    }\r\n    get items() {\r\n        return this._items;\r\n    }\r\n    hideMobile() {\r\n        if (this.document.body.classList.contains('sidebar-show')) {\r\n            this.renderer.removeClass(this.document.body, 'sidebar-show');\r\n        }\r\n    }\r\n};\r\nAppSidebarNavItemsComponent.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: Renderer2 },\r\n    { type: Router },\r\n    { type: SidebarNavHelper }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array),\r\n    __metadata(\"design:paramtypes\", [Array])\r\n], AppSidebarNavItemsComponent.prototype, \"items\", null);\r\nAppSidebarNavItemsComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-nav-items, cui-sidebar-nav-items',\r\n        template: `\n    <ng-container *ngFor=\"let item of items\">\n      <ng-container [ngSwitch]=\"helper.itemType(item)\">\n        <app-sidebar-nav-dropdown\n          *ngSwitchCase=\"'dropdown'\"\n          [item]=\"item\"\n          [class.open]=\"helper.isActive(router, item)\"\n          [ngClass]=\"item | appSidebarNavItemClass\"\n          appNavDropdown\n          routerLinkActive=\"open\">\n        </app-sidebar-nav-dropdown>\n        <app-sidebar-nav-divider\n          *ngSwitchCase=\"'divider'\"\n          [item]=\"item\"\n          [ngClass]=\"item | appSidebarNavItemClass\"\n          [appHtmlAttr]=\"item.attributes\">\n        </app-sidebar-nav-divider>\n        <app-sidebar-nav-title\n          *ngSwitchCase=\"'title'\"\n          [item]=\"item\"\n          [ngClass]=\"item | appSidebarNavItemClass\"\n          [appHtmlAttr]=\"item.attributes\">\n        </app-sidebar-nav-title>\n        <app-sidebar-nav-label\n          *ngSwitchCase=\"'label'\"\n          [item]=\"item\"\n          class=\"nav-item\"\n          [ngClass]=\"item | appSidebarNavItemClass\">\n        </app-sidebar-nav-label>\n        <ng-container\n          *ngSwitchCase=\"'empty'\">\n        </ng-container>\n        <app-sidebar-nav-link\n          *ngSwitchDefault\n          [item]=\"item\"\n          class=\"nav-item\"\n          [ngClass]=\"item | appSidebarNavItemClass\"\n          (linkClick)=\"hideMobile()\"\n        >\n        </app-sidebar-nav-link>\n      </ng-container>\n    </ng-container>\n  `\r\n    }),\r\n    __param(0, Inject(DOCUMENT)),\r\n    __metadata(\"design:paramtypes\", [Object, Renderer2,\r\n        Router,\r\n        SidebarNavHelper])\r\n], AppSidebarNavItemsComponent);\n\nlet AppSidebarNavLinkContentComponent = class AppSidebarNavLinkContentComponent {\r\n    constructor(helper) {\r\n        this.helper = helper;\r\n    }\r\n};\r\nAppSidebarNavLinkContentComponent.ctorParameters = () => [\r\n    { type: SidebarNavHelper }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarNavLinkContentComponent.prototype, \"item\", void 0);\r\nAppSidebarNavLinkContentComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-nav-link-content, cui-sidebar-nav-link-content',\r\n        template: `\r\n    <ng-container *ngIf=\"true\">\r\n      <i *ngIf=\"helper.hasIcon(item)\" [ngClass]=\"item | appSidebarNavIcon\"></i>\r\n      <ng-container>{{item.name}}</ng-container>\r\n      <span *ngIf=\"helper.hasBadge(item)\" [ngClass]=\"item | appSidebarNavBadge\">{{ item.badge.text }}</span>\r\n    </ng-container>\r\n  `,\r\n        providers: [SidebarNavHelper]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [SidebarNavHelper])\r\n], AppSidebarNavLinkContentComponent);\r\nlet AppSidebarNavLinkComponent = class AppSidebarNavLinkComponent {\r\n    constructor(router) {\r\n        this.router = router;\r\n        this.linkClick = new EventEmitter();\r\n        this.navigationEndObservable = router.events.pipe(filter(event => {\r\n            return event instanceof NavigationEnd;\r\n        }));\r\n    }\r\n    set item(item) {\r\n        this._item = JSON.parse(JSON.stringify(item));\r\n    }\r\n    get item() {\r\n        return this._item;\r\n    }\r\n    ngOnInit() {\r\n        this.url = typeof this.item.url === 'string' ? this.item.url : this.router.serializeUrl(this.router.createUrlTree(this.item.url));\r\n        this.linkType = this.getLinkType();\r\n        this.href = this.isDisabled() ? '' : (this.item.href || this.url);\r\n        this.linkActive = this.router.url.split(/[?#(;]/)[0] === this.href.split(/[?#(;]/)[0];\r\n        this.navSubscription = this.navigationEndObservable.subscribe(event => {\r\n            const itemUrlArray = this.href.split(/[?#(;]/)[0].split('/');\r\n            const urlArray = event.urlAfterRedirects.split(/[?#(;]/)[0].split('/');\r\n            this.linkActive = itemUrlArray.every((value, index) => value === urlArray[index]);\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this.navSubscription.unsubscribe();\r\n    }\r\n    getLinkType() {\r\n        return this.isDisabled() ? 'disabled' : this.isExternalLink() ? 'external' : 'link';\r\n    }\r\n    isDisabled() {\r\n        return (this.item.attributes && this.item.attributes.disabled) ? true : null;\r\n    }\r\n    isExternalLink() {\r\n        return !!this.item.href || this.url.substring(0, 4) === 'http';\r\n    }\r\n    linkClicked() {\r\n        this.linkClick.emit();\r\n    }\r\n};\r\nAppSidebarNavLinkComponent.ctorParameters = () => [\r\n    { type: Router }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], AppSidebarNavLinkComponent.prototype, \"item\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarNavLinkComponent.prototype, \"linkClick\", void 0);\r\nAppSidebarNavLinkComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-nav-link, cui-sidebar-nav-link',\r\n        template: \"<ng-container [ngSwitch]=\\\"linkType\\\">\\r\\n  <a *ngSwitchCase=\\\"'disabled'\\\"\\r\\n     [ngClass]=\\\"item | appSidebarNavLink\\\"\\r\\n     [appHtmlAttr]=\\\"item.attributes\\\"\\r\\n  >\\r\\n    <app-sidebar-nav-link-content [item]=\\\"item\\\"></app-sidebar-nav-link-content>\\r\\n  </a>\\r\\n  <a *ngSwitchCase=\\\"'external'\\\"\\r\\n     [ngClass]=\\\"item | appSidebarNavLink\\\"\\r\\n     [href]=\\\"href\\\"\\r\\n     [appHtmlAttr]=\\\"item.attributes\\\"\\r\\n     (click)=\\\"linkClicked()\\\"\\r\\n  >\\r\\n    <app-sidebar-nav-link-content [item]=\\\"item\\\"></app-sidebar-nav-link-content>\\r\\n  </a>\\r\\n  <a *ngSwitchDefault\\r\\n     [ngClass]=\\\"item | appSidebarNavLink\\\"\\r\\n     [appHtmlAttr]=\\\"item.attributes\\\"\\r\\n     [target]=\\\"item.attributes?.target\\\"\\r\\n     [queryParams]=\\\"item.linkProps?.queryParams\\\"\\r\\n     [fragment]=\\\"item.linkProps?.fragment\\\"\\r\\n     [queryParamsHandling]=\\\"item.linkProps?.queryParamsHandling\\\"\\r\\n     [preserveFragment]=\\\"item.linkProps?.preserveFragment\\\"\\r\\n     [skipLocationChange]=\\\"item.linkProps?.skipLocationChange\\\"\\r\\n     [replaceUrl]=\\\"item.linkProps?.replaceUrl\\\"\\r\\n     [state]=\\\"item.linkProps?.state\\\"\\r\\n     [routerLink]=\\\"item.url\\\"\\r\\n     [class.active]=\\\"linkActive\\\"\\r\\n     (click)=\\\"linkClicked()\\\"\\r\\n  >\\r\\n    <app-sidebar-nav-link-content [item]=\\\"item\\\"></app-sidebar-nav-link-content>\\r\\n  </a>\\r\\n</ng-container>\\r\\n\",\r\n        providers: [SidebarNavHelper]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [Router])\r\n], AppSidebarNavLinkComponent);\n\nlet AppSidebarNavTitleComponent = class AppSidebarNavTitleComponent {\r\n    constructor(el, renderer) {\r\n        this.el = el;\r\n        this.renderer = renderer;\r\n    }\r\n    ngOnInit() {\r\n        const nativeElement = this.el.nativeElement;\r\n        const name = this.renderer.createText(this.item.name);\r\n        if (this.item.class) {\r\n            const classes = this.item.class;\r\n            this.renderer.addClass(nativeElement, classes);\r\n        }\r\n        if (this.item.wrapper) {\r\n            const wrapper = this.renderer.createElement(this.item.wrapper.element);\r\n            this.addAttribs(this.item.wrapper.attributes, wrapper);\r\n            this.renderer.appendChild(wrapper, name);\r\n            this.renderer.appendChild(nativeElement, wrapper);\r\n        }\r\n        else {\r\n            this.renderer.appendChild(nativeElement, name);\r\n        }\r\n    }\r\n    addAttribs(attribs, element) {\r\n        if (attribs) {\r\n            for (const attr in attribs) {\r\n                if (attr === 'style' && typeof (attribs[attr]) === 'object') {\r\n                    this.setStyle(attribs[attr], element);\r\n                }\r\n                else if (attr === 'class') {\r\n                    this.addClass(attribs[attr], element);\r\n                }\r\n                else {\r\n                    this.setAttrib(attr, attribs[attr], element);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setStyle(styles, el) {\r\n        for (const style in styles) {\r\n            this.renderer.setStyle(el, style, styles[style]);\r\n        }\r\n    }\r\n    addClass(classes, el) {\r\n        const classArray = (Array.isArray(classes) ? classes : classes.split(' '));\r\n        classArray.filter((element) => element.length > 0).forEach(element => {\r\n            this.renderer.addClass(el, element);\r\n        });\r\n    }\r\n    setAttrib(key, value, el) {\r\n        this.renderer.setAttribute(el, key, value);\r\n    }\r\n};\r\nAppSidebarNavTitleComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarNavTitleComponent.prototype, \"item\", void 0);\r\nAppSidebarNavTitleComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-nav-title, cui-sidebar-nav-title',\r\n        template: ''\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ElementRef,\r\n        Renderer2])\r\n], AppSidebarNavTitleComponent);\n\nlet AppSidebarNavLabelComponent = class AppSidebarNavLabelComponent {\r\n    constructor(helper) {\r\n        this.helper = helper;\r\n        this.classes = {\r\n            'nav-label': true,\r\n            'active': true\r\n        };\r\n        this.iconClasses = {};\r\n    }\r\n    ngOnInit() {\r\n        this.iconClasses = this.helper.getIconClass(this.item);\r\n    }\r\n    getItemClass() {\r\n        const itemClass = this.item.class;\r\n        this.classes[itemClass] = !!itemClass;\r\n        return this.classes;\r\n    }\r\n    getLabelIconClass() {\r\n        const variant = `text-${this.item.label.variant}`;\r\n        this.iconClasses[variant] = !!this.item.label.variant;\r\n        const labelClass = this.item.label.class;\r\n        this.iconClasses[labelClass] = !!labelClass;\r\n        return this.iconClasses;\r\n    }\r\n};\r\nAppSidebarNavLabelComponent.ctorParameters = () => [\r\n    { type: SidebarNavHelper }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AppSidebarNavLabelComponent.prototype, \"item\", void 0);\r\nAppSidebarNavLabelComponent = __decorate([\r\n    Component({\r\n        selector: 'app-sidebar-nav-label, cui-sidebar-nav-label',\r\n        template: \"<a [ngClass]=\\\"getItemClass()\\\"\\r\\n   href=\\\"{{item.url}}\\\"\\r\\n   [appHtmlAttr]=\\\"item.attributes\\\">\\r\\n  <i *ngIf=\\\"helper.hasIcon(item)\\\" [ngClass]=\\\"getLabelIconClass()\\\"></i>\\r\\n  <ng-container>{{item.name}}</ng-container>\\r\\n  <span *ngIf=\\\"helper.hasBadge(item)\\\" [ngClass]=\\\"item | appSidebarNavBadge\\\">{{ item.badge.text }}</span>\\r\\n</a>\\r\\n\"\r\n    }),\r\n    __metadata(\"design:paramtypes\", [SidebarNavHelper])\r\n], AppSidebarNavLabelComponent);\n\nlet AppSidebarNavIconPipe = class AppSidebarNavIconPipe {\r\n    transform(item, args) {\r\n        const classes = {\r\n            'nav-icon': true\r\n        };\r\n        const icon = item.icon;\r\n        classes[icon] = !!item.icon;\r\n        return classes;\r\n    }\r\n};\r\nAppSidebarNavIconPipe = __decorate([\r\n    Pipe({\r\n        name: 'appSidebarNavIcon'\r\n    })\r\n], AppSidebarNavIconPipe);\n\nlet AppSidebarNavBadgePipe = class AppSidebarNavBadgePipe {\r\n    transform(item, args) {\r\n        const classes = {\r\n            'badge': true\r\n        };\r\n        const variant = `badge-${item.badge.variant}`;\r\n        classes[variant] = !!item.badge.variant;\r\n        classes[item.badge.class] = !!item.badge.class;\r\n        return classes;\r\n    }\r\n};\r\nAppSidebarNavBadgePipe = __decorate([\r\n    Pipe({\r\n        name: 'appSidebarNavBadge'\r\n    })\r\n], AppSidebarNavBadgePipe);\n\nlet AppSidebarNavLinkPipe = class AppSidebarNavLinkPipe {\r\n    transform(item) {\r\n        const classes = { 'nav-link': true };\r\n        const disabled = item.attributes && item.attributes.disabled;\r\n        classes['disabled'] = disabled;\r\n        classes['btn-link'] = disabled;\r\n        classes[`nav-link-${item.variant}`] = !!item.variant;\r\n        return classes;\r\n    }\r\n};\r\nAppSidebarNavLinkPipe = __decorate([\r\n    Pipe({\r\n        name: 'appSidebarNavLink'\r\n    })\r\n], AppSidebarNavLinkPipe);\n\nlet AppSidebarNavItemClassPipe = class AppSidebarNavItemClassPipe {\r\n    constructor(helper) {\r\n        this.helper = helper;\r\n    }\r\n    transform(item, ...args) {\r\n        const itemType = this.helper.itemType(item);\r\n        let itemClass;\r\n        if (['divider', 'title'].includes(itemType)) {\r\n            itemClass = `nav-${itemType}`;\r\n        }\r\n        else if (itemType === 'dropdown') {\r\n            itemClass = 'nav-item nav-dropdown';\r\n        }\r\n        else {\r\n            itemClass = 'nav-item';\r\n        }\r\n        return item.class ? `${itemClass} ${item.class}` : itemClass;\r\n    }\r\n};\r\nAppSidebarNavItemClassPipe.ctorParameters = () => [\r\n    { type: SidebarNavHelper }\r\n];\r\nAppSidebarNavItemClassPipe = __decorate([\r\n    Pipe({\r\n        name: 'appSidebarNavItemClass'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [SidebarNavHelper])\r\n], AppSidebarNavItemClassPipe);\n\nlet AppSidebarModule = class AppSidebarModule {\r\n};\r\nAppSidebarModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            CommonModule,\r\n            RouterModule,\r\n            LayoutModule\r\n        ],\r\n        exports: [\r\n            AppSidebarFooterComponent,\r\n            AppSidebarFormComponent,\r\n            AppSidebarHeaderComponent,\r\n            AppSidebarMinimizerComponent,\r\n            AppSidebarComponent,\r\n            AppSidebarNavItemsComponent,\r\n            AppSidebarNavComponent,\r\n            AppSidebarNavDividerComponent,\r\n            AppSidebarNavDropdownComponent,\r\n            AppSidebarNavLinkComponent,\r\n            AppSidebarNavLinkContentComponent,\r\n            AppSidebarNavTitleComponent,\r\n            NavDropdownDirective,\r\n            NavDropdownToggleDirective,\r\n            LayoutModule\r\n        ],\r\n        declarations: [\r\n            AppSidebarFooterComponent,\r\n            AppSidebarFormComponent,\r\n            AppSidebarHeaderComponent,\r\n            AppSidebarMinimizerComponent,\r\n            AppSidebarMinimizerComponent,\r\n            AppSidebarComponent,\r\n            AppSidebarNavItemsComponent,\r\n            AppSidebarNavComponent,\r\n            AppSidebarNavDividerComponent,\r\n            AppSidebarNavDropdownComponent,\r\n            AppSidebarNavLinkComponent,\r\n            AppSidebarNavLinkContentComponent,\r\n            AppSidebarNavTitleComponent,\r\n            NavDropdownDirective,\r\n            NavDropdownToggleDirective,\r\n            AppSidebarNavLabelComponent,\r\n            AppSidebarNavIconPipe,\r\n            AppSidebarNavBadgePipe,\r\n            AppSidebarNavLinkPipe,\r\n            AppSidebarNavItemClassPipe\r\n        ],\r\n        providers: [\r\n            SidebarNavHelper,\r\n            AppSidebarService\r\n        ]\r\n    })\r\n], AppSidebarModule);\n\n/*\r\n * Public API Surface of @coreui/angular\r\n */\r\n// export * from './lib/shared/index';\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AppAsideComponent, AppAsideModule, AppBreadcrumbComponent, AppBreadcrumbModule, AppFooterComponent, AppFooterModule, AppHeaderComponent, AppHeaderModule, AppSidebarComponent, AppSidebarModule, CuiBreadcrumbComponent, LayoutModule as ɵa, SidebarToggleDirective as ɵb, AppSidebarNavIconPipe as ɵba, AppSidebarNavBadgePipe as ɵbb, AppSidebarNavLinkPipe as ɵbc, AppSidebarNavItemClassPipe as ɵbd, SidebarMinimizeDirective as ɵc, MobileSidebarToggleDirective as ɵd, SidebarOffCanvasCloseDirective as ɵe, BrandMinimizeDirective as ɵf, AsideToggleDirective as ɵg, HtmlAttributesDirective as ɵh, ClassToggler as ɵi, AppBreadcrumbService as ɵj, AppSidebarService as ɵk, AppSidebarFooterComponent as ɵl, AppSidebarFormComponent as ɵm, AppSidebarHeaderComponent as ɵn, AppSidebarMinimizerComponent as ɵo, AppSidebarNavItemsComponent as ɵp, SidebarNavHelper as ɵq, AppSidebarNavComponent as ɵr, AppSidebarNavDividerComponent as ɵs, AppSidebarNavDropdownComponent as ɵt, AppSidebarNavLinkContentComponent as ɵu, AppSidebarNavLinkComponent as ɵv, AppSidebarNavTitleComponent as ɵw, NavDropdownDirective as ɵx, NavDropdownToggleDirective as ɵy, AppSidebarNavLabelComponent as ɵz };\n"]}